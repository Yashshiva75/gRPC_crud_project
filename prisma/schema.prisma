// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  posts   Post[]
  profile Profile?
}

model Taxation {
  id                Int              @id @default(autoincrement())
  title             String
  taxRate           Float
  effectiveFrom     DateTime
  effectiveTo       DateTime
  createdBy         String
  documentNumber    String?
  remarks           String?
  isActive          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Nested relations
  employeeInfo      EmployeeInfo     @relation(fields: [employeeInfoId], references: [id])
  employeeInfoId    Int
  employeeAddress   EmployeeAddress  @relation(fields: [employeeAddressId], references: [id])
  employeeAddressId Int
}

model EmployeeInfo {
  id            Int        @id @default(autoincrement())
  name          String
  age           Int
  designation   String
  maritalStatus String
  department    String?
  joiningDate   DateTime
  isActive      Boolean     @default(true)

  taxations     Taxation[]
}

model EmployeeAddress {
  id        Int       @id @default(autoincrement())
  houseNo   String
  street    String
  city      String
  state     String
  country   String
  pinCode   String
  landmark  String?

  isActive  Boolean   @default(true)
  taxations Taxation[]
}

//Account 
enum AccountType{
  Current
  Savings
  Fixed_deposit
}

enum AccountStatus{
  Active
  Inactive
}

model Account {
  id             String        @id @default(uuid()) @db.Uuid
  holderName     String
  accountNumber  String        
  type           AccountType
  status         AccountStatus @default(Active)
  balance        Float
  openedAt       DateTime
  isActive       Boolean       @default(true)
  
  contactInfo    ContactInfo?  @relation(fields: [contactInfoId], references: [id])
  contactInfoId  String?       @unique @db.Uuid

  kycDetails     KycDetails?   @relation(fields: [kycDetailsId], references: [id])
  kycDetailsId   String?       @unique @db.Uuid

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model ContactInfo {
  id         String   @id @default(uuid()) @db.Uuid
  phone      String
  email      String
  address    String
  city       String
  pincode    String
  country    String
  isActive   Boolean  @default(true)

  account    Account?
}

model KycDetails {
  id              String   @id @default(uuid()) @db.Uuid
  panCardNumber   String  
  
  isVerified      Boolean  @default(false)

  account         Account?
}

model student {
  id    String @id @default(uuid())
  name   String
  age    Int
  class   Int
  subject String @db.Uuid
  subject_relation  subject @relation(fields: [subject], references: [id])
}

model subject {
  id   String @id @default(uuid()) @db.Uuid
  sub_name String
  students student[]
}

model QBClass {
  id               String   @id @default(uuid()) @db.Uuid
  qbId             String?   @unique            // Maps to QB's "Id"
  name             String                     // Maps to QB's "Name"
  fullName         String?                    // Maps to QB's "FullyQualifiedName"
  isSubClass       Boolean   @default(false)   // Maps to QB's "SubClass"
  isActive         Boolean   @default(true)    // Maps to QB's "Active"
  domainSource     String?                    // Maps to QB's "domain"
  versionToken     Int       @default(0)       // Maps to QB's "SyncToken" (converted to Int)
  isSparse         Boolean   @default(false)   // Maps to QB's "sparse"

  createdAt        DateTime  @default(now())   // Maps to QB MetaData.CreateTime
  updatedAt        DateTime  @updatedAt        // Maps to QB MetaData.LastUpdatedTime
}
